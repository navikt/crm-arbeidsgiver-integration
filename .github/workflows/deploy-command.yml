name: Deploy Command
on:
  repository_dispatch:
    types: [deploy-command]
jobs:
  deployCommand:
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Store secret for production
      - name: 'Populate auth file with PROD_SFDX_URL secret'
        if: github.event.client_payload.slash_command.arg1 == 'prod'
        shell: bash
        run: 'echo ${{ secrets.PROD_SFDX_URL }} > ./SFDX_AUTH_URL.txt'

      # Store secret for preprod
      - name: 'Populate auth file with PREPROD_SFDX_URL secret'
        if: github.event.client_payload.slash_command.arg1 == 'preprod'
        shell: bash
        run: 'echo ${{ secrets.PREPROD_SFDX_URL }} > ./SFDX_AUTH_URL.txt'

      # Authenticate org as installation target
      - name: 'Authenticate deployment org'
        run: 'sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -a targetOrg -s'

      # Remove auth file
      - name: 'Remove auth files'
        run: |
          rm -f ./SFDX_AUTH_URL.txt

      # Install package in target org
      - name: 'Install package in target org'
        run: 'sfdx force:package:install --package ${{ github.event.client_payload.slash_command.arg2 }} -k ${{ secrets.PACKAGE_KEY }} -w 10 -b 10 -u targetOrg -r'

      # Get report of package
      - name: Get report of package
        id: package-report
        run: |
          echo "::set-output name=output::$(sfdx force:package:version:report -p ${{ github.event.client_payload.slash_command.arg2 }} --json)"


      # set variables
      - name: "Set release fields"
        if: success()
        id: release-fields
        run: |
          echo "::set-output name=tagName::v$( ${{ steps.package-report.outputs.output }} | jq '.result.Name' -r )-beta$( ${{ steps.package-report.outputs.output }} | jq '.result.BuildNumber' -r )"
          echo "::set-output name=releaseName::$( ${{ steps.package-report.outputs.output }} | jq '.result.Name' -r )-beta$( ${{ steps.package-report.outputs.output }} | jq '.result.BuildNumber' -r )"

      # Updates release with install logs
      - name: Update release with install logs
        if: success()
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.release-fields.outputs.tagName}}
          release_name: ${{steps.release-fields.outputs.releaseName}}
          body: |
            test
          # **Version**: ${{ steps.release-fields.outputs.bodyVersion }}
          # **Package ID**: ${{ github.event.client_payload.slash_command.arg1 }}
          # **Author**: ${{ github.event.client_payload.slash_command.arg2 }}
          
          # ${{ github.event.client_payload.slash_command.unnamed_args }}
          draft: false
          prerelease: false

      # Add a hooray reaction to comment on success
      - name: 'Add success reaction'
        if: success()
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray

      # Add error reaction
      - name: "Add error reaction"
        if: failure()
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: '-1'