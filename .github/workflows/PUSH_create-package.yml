# Unique name for this workflow
name: Push to master

# Definition when the workflow should run
on:
  push:
    branches:
      - master
    #################paths:
    ################   - "force-app/**"

# Jobs to be executed
jobs:
  packaging:
    name: Create new package 
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Store secret for dev hub
      - name: "Populate auth file with PROD_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt"

      # Store secret for package target org installation
      - name: "Populate auth file with INTEGRATION_SANDBOX_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.INTEGRATION_SANDBOX_SFDX_URL}} > ./INTEGRATION_SANDBOX_SFDX_URL.txt"

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: "sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d"

      # Authenticate integration sandbox
      - name: "Authenticate package target org"
        run: "sfdx force:auth:sfdxurl:store -f ./INTEGRATION_SANDBOX_SFDX_URL.txt -a integration-sandbox -s"

      # Remove auth files
      - name: "Remove auth files"
        if: always()
        run: |
          rm -f ./PROD_SFDX_URL.txt
          rm -f ./INTEGRATION_SANDBOX_SFDX_URL.txt

      # Create package version
      - name: "Create package version"
        id: package-version-create
        run: |
          echo "::set-output name=result::$(sfdx force:package:version:create -f config/package-scratch-def.json -p $(cat sfdx-project.json | jq '.packageDirectories[0].package' -r) -k ${{ secrets.PACKAGE_KEY }} -w 20 --json | jq -c .)"
          echo "::set-output name=isSuccess::true"

      # Extract data from package version create result
      - name: "Extract package:version:create result data"
        id: extract-data-package-version-create
        uses: muenzpraeger/github-action-extract-sfdx-packaging-result@master
        with:
          json: ${{steps.package-version-create.outputs.result}}

      # Install package version into integration sandbox
      - name: "Install new package version into test org"
        if: steps.extract-data-package-version-create.outputs.isSuccess
        run: "sfdx force:package:install --package ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} -w 10 -b 10 -u integration-sandbox -r -k ${{ secrets.PACKAGE_KEY }}"

      # Update sfdx-project.json and README to use only latest package version
      - name: "Update sfdx-project.json and README"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess)
        id: packaging-updater
        uses: muenzpraeger/github-action-sfdx-packaging-updater@master

      # Create commit message by extracting the latest version number from sfdx-project.json
      - name: "Build commit message"
        if: success() || (failure() && steps.packaging-updater.outputs.isSuccess)
        id: build-commit-message
        run: echo "::set-output name=message::[CI] Create package version $(cut -d '@' -f 2 <<< $(cat sfdx-project.json | jq '.packageAliases | keys[-1]' -r))"

      # Re-add changes back to source
      - name: "Add new package version, updated sfdx-project.json and README to source"
        if: (success() || failure()) && steps.packaging-updater.outputs.isSuccess
        uses: Automattic/action-commit-to-branch@master
        with:
          branch: "master"
          commit_message: ${{steps.build-commit-message.outputs.message}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # checkout new code on master
      - name: Checkout code
        uses: actions/checkout@master

      # create github release
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')
          release_name: $(cat sfdx-project.json | jq '.packageDirectories[0].package' -r) ($(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//'))
          body: |
            # $(cat sfdx-project.json | jq '.packageDirectories[0].package' -r)
            **Version**: $(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//') (beta $(cat sfdx-project.json | jq '.packageAliases | keys_unsorted[-1]' -r | sed 's/.*-//'))
            **Package ID**: ${{ steps.extract-data-package-version-create.outputs.packageVersionId }}
          draft: false
          prerelease: true
